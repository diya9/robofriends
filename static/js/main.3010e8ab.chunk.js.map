{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3010e8ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-pink dib br3 pa3 ma2 grow shadow-S'>\r\n            <img alt= 'robots' src = {`https://robohash.org/${id}?100*100`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n \r\n    return (\r\n        <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key= {i} \r\n                            id= {robots[i].id} \r\n                            name = {robots[i].name} \r\n                            email= {robots[i].email} \r\n                        />\r\n                    );\r\n                }) \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='Search Robots' \r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{ overflowY : 'scroll', border : '1px solid black', height : '500px' }}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops that's not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField : state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n   } \r\n}\r\n\r\nclass App extends Component {\r\n    \r\n    componentDidMount() {\r\n       this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {       \r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>Loading.....</h1> :\r\n\r\n            ( \r\n                <div className = 'tc'>\r\n                    <h1 className = 'f1' > RoboFriends </h1> \r\n                    <SearchBox searchChange = { onSearchChange }/>\r\n                    <Scroll> \r\n                        <ErrorBoundary>\r\n                            <CardList robots = { filteredRobots }/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div >\r\n            );\r\n            \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state= initialStateSearch, action= {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n         default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING: \r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render( \r\n    <Provider store= {store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n    );\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}